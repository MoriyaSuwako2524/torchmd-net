name: Build for CUDA 12.4 and publish

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}-${{ matrix.cuda }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-2022, macos-latest]
        cuda: [cpu, cu118, cu124]
        exclude:
          - os: ubuntu-24.04-arm
            cuda: cu118
          - os: ubuntu-24.04-arm
            cuda: cu124
          - os: macos-latest
            cuda: cu118
          - os: macos-latest
            cuda: cu124

    steps:
      - name: Free space of Github Runner (otherwise it will fail by running out of disk)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "/usr/local/.ghcup"
          sudo rm -rf "/usr/local/julia1.9.2"
          sudo rm -rf "/usr/local/lib/android"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.23.0

      - name: Activate MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-2022'
        # with:
        #   toolset: "17.0"

      - name: Build wheels
        shell: bash -l {0}
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            export CIBW_ARCHS="${{ matrix.os == 'ubuntu-24.04-arm' && 'aarch64' || 'auto64' }}"
          fi
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BEFORE_ALL_LINUX: "cibuildwheel_support/prepare_build_environment_linux_${{ matrix.cuda }}.sh"
          CIBW_BEFORE_ALL_MACOS: "cibuildwheel_support/prepare_build_environment_osx.sh"
          CIBW_BEFORE_ALL_WINDOWS: "bash cibuildwheel_support/prepare_build_environment_windows_${{ matrix.cuda }}.sh"
          CPU_TRAIN: ${{ runner.os == 'macOS' && 'true' || 'false' }}
          WITH_CUDA: ${{ matrix.cuda != 'cpu' && '1' || '0' }}
          DISTUTILS_USE_SDK: "0" # Windows requires this to not use vc for building but for testing only
          SKIP_TORCH_COMPILE: ${{ runner.os == 'Windows' && 'true' || 'false' }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cuda }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  # publish-to-pypi:
  #   name: >-
  #     Publish Python 🐍 distribution 📦 to PyPI
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/torchmd-net
  #   permissions:
  #     id-token: write # IMPORTANT: mandatory for trusted publishing

  #   steps:
  #     - name: Download all the dists
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist/
  #         merge-multiple: true

  #     - name: Publish distribution 📦 to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         password: ${{ secrets.TMDNET_PYPI_API_TOKEN }}
  #         skip_existing: true

  # github-release:
  #   name: >-
  #     Sign the Python 🐍 distribution 📦 with Sigstore
  #     and upload them to GitHub Release
  #   needs:
  #     - publish-to-pypi
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write # IMPORTANT: mandatory for making GitHub Releases
  #     id-token: write # IMPORTANT: mandatory for sigstore

  #   steps:
  #     - name: Download all the dists
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist/
  #         merge-multiple: true

  #     - name: Sign the dists with Sigstore
  #       uses: sigstore/gh-action-sigstore-python@v3.0.0
  #       with:
  #         inputs: >-
  #           ./dist/*.whl

  #     - name: Create GitHub Release
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: >-
  #         gh release create
  #         "$GITHUB_REF_NAME"
  #         --repo "$GITHUB_REPOSITORY"
  #         --notes ""

  #     - name: Upload artifact signatures to GitHub Release
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       # Upload to GitHub Release using the `gh` CLI.
  #       # `dist/` contains the built packages, and the
  #       # sigstore-produced signatures and certificates.
  #       run: >-
  #         gh release upload
  #         "$GITHUB_REF_NAME" dist/**
  #         --repo "$GITHUB_REPOSITORY"
